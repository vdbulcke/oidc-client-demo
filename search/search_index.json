{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p><code>oidc-client</code> is a CLI tool for testing OIDC integration. See CLI docs here </p>"},{"location":"#features","title":"Features","text":"<ul> <li>OIDC Authorization Code flow </li> <li>Provider Discovery (<code>./well-known/openid-configuration</code>)</li> <li>Token Signature validation (from jwk provider endpoint)</li> <li>Client Auth Method (<code>client_secret_basic</code>, <code>client_secret_post</code>)</li> <li>PKCE: Proof Key for Code Exchange rfc7636</li> <li>Refresh Token Flow</li> <li>Userinfo </li> <li>Token Introspection </li> <li>(optional) Pushed Authorization Request (rfc9126)</li> <li>(optional) Acr Values</li> <li>(optional) Amr Whitelist</li> </ul>"},{"location":"changelog/","title":"Changelog","text":"<p>Check the generated CHANGELOG.md from the Github repo</p>"},{"location":"config/","title":"Client Configuration","text":"<p>You can find a complete example of the client configuration in example/config.yaml.</p>"},{"location":"config/#client-authentication-settings","title":"Client Authentication Settings","text":""},{"location":"config/#client-id-and-secret","title":"Client ID and Secret","text":"<p>Important</p> <p>Mandatory (either in config file or ENV variables) unless using pkce flow. In which case the <code>client_secret</code> is not required.</p> <p>See section PKCE.</p> <p>The OIDC client credentials can be passed either in the main <code>config.yaml</code> config file, or as environment variables. </p>"},{"location":"config/#config-file","title":"Config File","text":"<pre><code>## Client Credentials: (Mandatory)\n### NOTE: those client_id/client_secret can be passed\n###       as environment variables with: \n###\n###    export OIDC_CLIENT_ID=my_client_id\n###    export OIDC_CLIENT_SECRET=my_client_secret\n###\nclient_id: my_client_id\nclient_secret: my_client_secret\n</code></pre>"},{"location":"config/#env-variables","title":"Env Variables","text":"<pre><code>export OIDC_CLIENT_ID=my_client_id\nexport OIDC_CLIENT_SECRET=my_client_secret\n</code></pre>"},{"location":"config/#client-authentication-method","title":"Client Authentication Method","text":"<p>Important</p> <p>Mandatory setting</p> <p>Client authentication method MUST be one of </p> <ul> <li><code>client_secret_basic</code>: ClientID/ClientSecret are passed as Basic Authentication Header.</li> <li><code>client_secret_post</code>: ClientID/ClientSecret are passed in the POST body as <code>application/x-www-form-urlencoded</code> parameters.</li> </ul> <pre><code>## Client Auth Method: (Mandatory)\n###  Since version v0.2.0\n### Supported Auth Method\n###  * client_secret_basic (Using Basic Auth Header)\n###  * client_secret_post  (Using POST request)\nauth_method: client_secret_basic\n</code></pre>"},{"location":"config/#pkce","title":"PKCE","text":"<p>Note</p> <p>Optional Settings</p> <p>Set <code>use_pkce: true</code> to enable the Authorization Code Flow with PKCE. </p> <pre><code>## PKCE Flow: (Optional)\n### Since version v0.5.0\n### Enabled PKCE Flow\n# use_pkce: true\n</code></pre> <p>Info</p> <p><code>auth_method</code> needs to be set to <code>client_secret_post</code> when using PKCE.</p> <p>More information about pkce can be found https://www.oauth.com/oauth2-servers/pkce/.</p>"},{"location":"config/#pkce-challenge-method","title":"Pkce Challenge Method","text":"<p>Note</p> <p>Optional Settings</p> <pre><code>### Supported challenge method \n###  * S256 (Recommended) Default if not specified\n###  * plain \n# pkce_challenge_method: S256\n</code></pre>"},{"location":"config/#pushed-authorization-request-par","title":"Pushed Authorization Request (PAR)","text":"<p>Note</p> <p>Optional Settings (default disable)</p> <p>Set <code>use_par: true</code> to send the Pushed Authorization Request to the Authorization Server, when doing the Authorization Code Flow. </p> <pre><code>## PAR (optional)\n###  since v0.11.0\n###  Sends a Pushed Authorization Request to \n###  Authorization Server, and redirect the user \n###  to the Authorization endpoint with a 'request_uri'.\n### \n###  By default, the par endpoint is discovered from the \n###  well-known endpoint 'pushed_authorization_request_endpoint'.\n###\n###  reference: rfc9126\n### Enable PAR\n# use_par: true \n### Override PAR endpoint\n# par_endpoint: \"https://example.com/par\"\n### Custom key (other than 'pushed_authorization_request_endpoint') on well known endpoint \n# par_endpoint_wellknown_key: \"par_endpoint\"\n### Arbitrary Key/Value parameters to include in PAR request\n# par_additional_parameters: \n#   foo:  bar \n#   hello: world\n</code></pre> <p>By default, the PAR endpoint of the Authorization Server is derived from the Well Known endpoint via the <code>pushed_authorization_request_endpoint</code> property (rfc9126#section-5).</p> <p>The PAR request sent by <code>oidc-client</code> contains the same parameters as the typical Authorization request (including extensions like PKCE, ACR Values). The <code>oidc-client</code> will display the PAR response (<code>request_uri</code>, and <code>expires_in</code>) on the terminal, and will only sends the received <code>request_uri</code> and <code>client_id</code> when redirecting the user to the Authorization endpoint (going to <code>http://127.0.0.1:5556/login</code>).</p>"},{"location":"config/#non-standard-par-endpoint","title":"Non Standard PAR Endpoint","text":"<p>If your Authorization Server uses another property than <code>pushed_authorization_request_endpoint</code> on its Well Known endpoint, you can set <code>par_endpoint_wellknown_key: \"custom_par_endpoint_property\"</code>. </p> <p>If your Authorization Server does not exposes the PAR endpoint at all on its Well Known endpoint, you can specify it via <code>par_endpoint: \"https://example.com/par\"</code>. </p>"},{"location":"config/#additional-parameters-in-par-request","title":"Additional Parameters In PAR Request","text":"<p>If your Authorization Server supports additional parameters on its PAR endpoints, you can specify a map of Key/Value with</p> <pre><code>## Format Map[string]string\npar_additional_parameters: foo:  bar hello: world\n</code></pre> <p>Important</p> <p>As defined in rfc9126#section-3, if the <code>request</code> parameter is specified as <code>par_additional_parameters</code> all others parameter than <code>[\"request\", \"client_id\", \"client_secret\", \"client_assertion_type\", \"client_assertion\"]</code> will be removed from the PAR request. </p> <p>Info</p> <p>Use the <code>--debug</code> to see the PAR request payload.</p>"},{"location":"config/#scopes","title":"Scopes","text":"<p>Important</p> <p>Mandatory setting</p> <p>You can update the list of scopes requested using the <code>scopes</code> setting:</p> <pre><code>## Scopes: (Mandatory)\nscopes:\n- openid\n- profile\n</code></pre>"},{"location":"config/#authorization-server","title":"Authorization Server","text":""},{"location":"config/#issuer-and-well-known-configuration","title":"Issuer (and well-known configuration)","text":"<p>Important</p> <p>Mandatory setting</p> <p>You must specify the <code>issuer</code> setting that will be used to construct the OpenID Connect Discovery Configuration (<code>/.well-known/openid-configuration</code>).</p> <pre><code>## IDP Config: (Mandatory)\n### NOTE: this 'issuer' will be used to find the /.well-known/openid-configuration \n###       by adding /.well-known/openid-configuration after the issuer base url \nissuer: \"https://example.com\"\n</code></pre>"},{"location":"config/#alternative-well-known","title":"Alternative Well Known","text":"<p>Note</p> <p>Optional Settings </p> <p>If you Authorization Server exposes a non compliant Well Known endpoint (i.e. not on the same domain as the <code>issuer</code>), you can specify an alternative urls via <code>alternative_wellknown_endpoint</code>, and you can disable Well Known endpoint validation with <code>insecure_wellknown_endpoint: true</code>.</p> <pre><code>## Alternative Well-Known (Optional)\n###  since v0.11.0 \n### \n# alternative_wellknown_endpoint: \"\"\n### Disable well known endpoint validation\n# insecure_wellknown_endpoint: true\n</code></pre>"},{"location":"config/#token-introspection-endpoint","title":"Token Introspection Endpoint","text":"<p>Warning</p> <p>Mandatory setting for the <code>oidc-client introspect</code> subcommand. </p> <p>See Token Introspection for more info.</p> <p>You must specify the <code>introspect_endpoint</code> setting that will be used for token introspection request to the Authorization Server. <pre><code>## Introspect: (Mandatory for 'introspect sub command')\n## \nintrospect_endpoint: \"https://example.com/introspect\"\n</code></pre></p>"},{"location":"config/#overriding-authorization-server-endpoints","title":"Overriding Authorization Server Endpoints","text":"<p>Note</p> <p>Optional Settings</p> <p>If you need to override some endpoints from the discovery <code>.well-known/openid-configuration</code> build from the issuer, you have the option of setting those endpoints: </p> <ul> <li><code>token_endpoint</code>: endpoint used for getting Access Token</li> <li><code>authorize_endpoint</code>: endpoint used for the Authorization code flow</li> <li><code>jwks_endpoint</code>: endpoint used for getting JSON Web Keys for signature validation</li> </ul> <pre><code>## Override Token endpoint: (Optional)\n###   You can override some endpoints after they are fetched from ./well-known/openid-configuration\n### \n# token_endpoint: \"https://example.com/oauth2/access_token\"\n# authorize_endpoint: \"https://example.com/oauth2/authorize\"\n# jwks_endpoint: \"https://example.com/oauth2/jwk.json\"\n</code></pre>"},{"location":"config/#skip-userinfo-call","title":"Skip Userinfo Call","text":"<p>Note</p> <p>Optional Settings</p> <p>Some Authorization Servers returns all the claims directly in the ID Token, or some don't even support the userinfo_endpoint. For those reasons, if you don't need to make the extra userinfo call, you can disable it by setting <code>skip_userinfo_call: true</code>.</p> <pre><code>## Skip Userinfo: (Optional)\n###   Disable call to userinfo endpoint\n# skip_userinfo_call: true\n</code></pre> <p>Tip</p> <p>This parameter can be overridden at run time by passing <code>--skip-userinfo</code> flags for the <code>oidc-client client</code> and <code>oidc-client refresh-token</code> sub commands. </p>"},{"location":"config/#security","title":"Security","text":""},{"location":"config/#token-signing-algorithms","title":"Token Signing Algorithms","text":"<p>Important</p> <p>Mandatory setting</p> <p>You can list the signing algorithms that the client support for validating token signatures.</p> <pre><code>## Token Signature Alg: (Mandatory)\n###   List allowed signing algorithm for token validation\ntoken_signing_alg: - \"RS256\"\n</code></pre> <p>Note</p> <p>The tokens will be validated against the <code>jwks_uri</code> metadata value from the Authorization Server <code>.well-known/openid-configuration</code></p>"},{"location":"config/#tls-settings","title":"TLS Settings","text":""},{"location":"config/#skip-tls-validation","title":"Skip TLS Validation","text":"<p>Note</p> <p>Optional Settings</p> <pre><code>## TLS Setting: (Optional)\n###   Disable TLS certificate validation\n# skip_tls_verification: true\n</code></pre>"},{"location":"config/#advanced-settings","title":"Advanced Settings","text":""},{"location":"config/#acr-values","title":"ACR Values","text":"<p>Note</p> <p>Optional Settings</p> <p>If your Authorization Server supports multiple authentication methods, you specify <code>acr_values</code> during the authorization endpooint call with:  </p> <pre><code>## Acr Values: (Optional)\n# acr_values: \"urn:be:fedict:iam:fas:citizen:Level100\"\n</code></pre>"},{"location":"config/#additional-parameters-in-authorization-request","title":"Additional Parameters In Authorization Request","text":"<p>Note</p> <p>Optional Settings</p> <p>If your Authorization Server supports additional parameters on its authorization endpoint, you can specify a map of Key/Value with</p> <pre><code>## Authorize Request Additional Param (optional)\n### since version 0.12.0\n### \n### Arbitrary Key/Value parameters to include in Authorize request\n### format map[string]string\nauthorize_additional_parameters:\nclaims: '{\"id_token\": {\"foo\": {\"values\": [\"bar\", \"baz\"]}}}'\n</code></pre> <p>Tip</p> <p>You can also use this to override default generated parameter (like <code>redirect_uri</code>). </p>"},{"location":"config/#amr-validation","title":"AMR Validation","text":"<p>Note</p> <p>Optional Settings</p> <p>If your Authorization Server supports multiple authentication methods, and sets the <code>amr</code> field in the id_token, you can validate allowed value with the <code>amr_list</code> setting. The client will validate that at least one of the configured amr value from the <code>amr_list</code> is present in the <code>amr</code> field from the id_token. </p> <pre><code>## AMR List: (Optional)\n###  List of allowed amr value, the validation\n###  will be successful if a least one of the amr\n###  in the list if present in the token\n# amr_list: \n# - eid\n# - bmid\n# - urn:be:fedict:iam:fas:Level500\n# - urn:be:fedict:iam:fas:Level450\n</code></pre>"},{"location":"config/#acr-validation","title":"ACR Validation","text":"<p>Note</p> <p>Optional Settings</p> <p>If your Authorization Server supports Authentication Context Class Reference, and sets the <code>acr</code> field in the id_token, you can validate allowed value with the <code>acr_list</code> setting. The client will validate that the value of the <code>acr</code> claim in the id_token is present in the <code>amr_list</code>. </p> <pre><code>## ACR List: (Optional)\n### Since v0.8.0\n###  List of allowed acr value, the validation\n###  will be successful if 'acr' claim from id_token\n###  is present in this list\n###\n# acr_list: \n# - \"0\" ## detault when acr are not implemented \n# - urn:be:fedict:iam:fas:Level500\n# - urn:be:fedict:iam:fas:Level450\n# - urn:be:fedict:iam:fas:Level400\n# - urn:be:fedict:iam:fas:Level350\n# - urn:be:fedict:iam:fas:Level200\n# - urn:be:fedict:iam:fas:Level100\n</code></pre>"},{"location":"config/#stateless-jwt-access-token","title":"Stateless (JWT) Access Token","text":"<p>Note</p> <p>Optional Settings</p> <p>Stateless Access Token are in JWT format that contains some information, and thus do not need to be introspected.</p> <p>By setting <code>access_token_jwt: true</code> the <code>oidc-client</code> will attempt to validate the Access Token jwt signature against the JWKS endpoint of the Authorization Server, and then print the content of the Access Token.</p> <pre><code>##  Access Token JWT: (Optional)\n###   Parse and Validate access token jwt\n# access_token_jwt: true\n</code></pre> <p>Warning</p> <p>Unlike for the ID Token, only basic JWT signature and issuer (<code>iss</code>) are validated</p>"},{"location":"config/#stateless-jwt-refresh-token","title":"Stateless (JWT) Refresh Token","text":"<p>Note</p> <p>Optional Settings</p> <p>Stateless Refresh Token are in JWT format that contains some information, and thus do not need to be introspected.</p> <p>By setting <code>refresh_token_jwt: true</code> the <code>oidc-client</code> will attempt to validate the Refresh Token jwt signature against the JWKS endpoint of the Authorization Server, and then print the content of the Refresh Token.</p> <pre><code>##  Refresh Token JWT: (Optional)\n###   Parse and Validate refresh token jwt\n# refresh_token_jwt: true\n</code></pre> <p>Warning</p> <p>Unlike for the ID Token, only basic JWT signature and issuer (<code>iss</code>) are validated</p>"},{"location":"install/","title":"Install","text":"<p>You can find the pre-compiled binaries on the release page https://github.com/vdbulcke/oidc-client-demo/releases</p>"},{"location":"install/#getting-latest-version","title":"Getting Latest Version","text":"<pre><code>TAG=$(curl https://api.github.com/repos/vdbulcke/oidc-client-demo/releases/latest  |jq .tag_name -r )\nVERSION=$(echo $TAG | cut -d 'v' -f 2)\n</code></pre> <p>Info</p> <p>You will need <code>jq</code> and <code>curl</code> in your <code>PATH</code></p>"},{"location":"install/#macos","title":"MacOS","text":"IntelARM (M1)Universal Binary <ol> <li>Download the binary  from the releases page:   <pre><code>curl -LO \"https://github.com/vdbulcke/oidc-client-demo/releases/download/${TAG}/oidc-client-demo_${VERSION}_Darwin_x86_64.tar.gz\"\n</code></pre></li> <li>Extract Binary:   <pre><code>tar xzf \"oidc-client-demo_${VERSION}_Darwin_x86_64.tar.gz\"\n</code></pre></li> <li>Check Version:    <pre><code>./oidc-client version\n</code></pre></li> <li>Install in your <code>PATH</code>:    <pre><code>sudo install oidc-client /usr/local/bin/\n</code></pre>   Or   <pre><code>sudo mv oidc-client /usr/local/bin/\n</code></pre></li> </ol> <ol> <li>Download the binary  from the releases page:   <pre><code>curl -LO \"https://github.com/vdbulcke/oidc-client-demo/releases/download/${TAG}/oidc-client-demo_${VERSION}_Darwin_amr64.tar.gz\"\n</code></pre></li> <li>Extract Binary:   <pre><code>tar xzf \"oidc-client-demo_${VERSION}_Darwin_amr64.tar.gz\"\n</code></pre></li> <li>Check Version:    <pre><code>./oidc-client version\n</code></pre></li> <li>Install in your <code>PATH</code>:    <pre><code>sudo install oidc-client /usr/local/bin/\n</code></pre>   Or   <pre><code>sudo mv oidc-client /usr/local/bin/\n</code></pre></li> </ol> <ol> <li>Download the binary  from the releases page:   <pre><code>curl -LO \"https://github.com/vdbulcke/oidc-client-demo/releases/download/${TAG}/oidc-client-demo_${VERSION}_Darwin_all.tar.gz\"\n</code></pre></li> <li>Extract Binary:   <pre><code>tar xzf \"oidc-client-demo_${VERSION}_Darwin_all.tar.gz\"\n</code></pre></li> <li>Check Version:    <pre><code>./oidc-client version\n</code></pre></li> <li>Install in your <code>PATH</code>:    <pre><code>sudo install oidc-client /usr/local/bin/\n</code></pre>   Or   <pre><code>sudo mv oidc-client /usr/local/bin/\n</code></pre></li> </ol>"},{"location":"install/#linux","title":"Linux","text":"IntelARM <ol> <li>Download the binary  from the releases page:   <pre><code>curl -LO \"https://github.com/vdbulcke/oidc-client-demo/releases/download/${TAG}/oidc-client-demo_${VERSION}_Linux_x86_64.tar.gz\"\n</code></pre></li> <li>Extract Binary:   <pre><code>tar xzf \"oidc-client-demo_${VERSION}_Linux_x86_64.tar.gz\"\n</code></pre></li> <li>Check Version:    <pre><code>./oidc-client version\n</code></pre></li> <li>Install in your <code>PATH</code>:    <pre><code>sudo install oidc-client /usr/local/bin/\n</code></pre>   Or   <pre><code>sudo mv oidc-client /usr/local/bin/\n</code></pre></li> </ol> <ol> <li>Download the binary  from the releases page:   <pre><code>curl -LO \"https://github.com/vdbulcke/oidc-client-demo/releases/download/${TAG}/oidc-client-demo_${VERSION}_Linux_amr64.tar.gz\"\n</code></pre></li> <li>Extract Binary:   <pre><code>tar xzf \"oidc-client-demo_${VERSION}_Linux_amr64.tar.gz\"\n</code></pre></li> <li>Check Version:    <pre><code>./oidc-client version\n</code></pre></li> <li>Install in your <code>PATH</code>:    <pre><code>sudo install oidc-client /usr/local/bin/\n</code></pre>   Or   <pre><code>sudo mv oidc-client /usr/local/bin/\n</code></pre></li> </ol>"},{"location":"install/#windows","title":"Windows","text":"Intel <ol> <li> <p>Download the binary <code>oidc-client-demo_[VERSION]_Windows_x86_64.zip</code>  from the releases page</p> </li> <li> <p>Unzip the Binary</p> </li> <li> <p>Check Version:    <pre><code>./oidc-client.exe version\n</code></pre></p> </li> </ol>"},{"location":"install/#verify-signatures-with-cosign","title":"Verify Signatures With Cosign","text":"<p>Info</p> <p>Install <code>cosign</code> from sigstore documentation</p> <ul> <li>Create a script <code>verify_signature.sh</code> </li> </ul> <pre><code>#!/bin/bash\n\nif [ -z \"$1\" ]; then echo \"Error: missing articate package as 1st input\"\necho \"Usage: \"\necho \"  $0 ARTIFACT_PACKAGE TAG\"\n\nexit 1\n\nfi\n\nif [ ! -f \"$1\" ] ; then  echo \"Error: artifcact $1 does not exists\"\nexit 1\n\nfi\n\nartifcat_path=$1\nartifact=$(basename $artifcat_path)\n\nif [ -z \"$2\" ]; then\necho \"Error: missing tag  as 2nd input\"\necho \"Usage: \"\necho \"  $0 $1  TAG\"\n\nexit 1\n\nfi\n\nTAG=$2\n\n\necho \"Checking Signature for version: ${TAG}\"\ncosign verify-blob \\\n--certificate \"https://github.com/vdbulcke/oidc-client-demo/releases/download/${TAG}/${artifact}.pem\" \\\n--signature \"https://github.com/vdbulcke/oidc-client-demo/releases/download/${TAG}/${artifact}.sig\"  \\\n--certificate-oidc-issuer https://token.actions.githubusercontent.com  \\\n--certificate-identity  \"https://github.com/vdbulcke/oidc-client-demo/.github/workflows/release.yaml@refs/tags/${TAG}\"  \\\n${artifcat_path}\n</code></pre> <ul> <li> <p>Update executable permission  <pre><code>chmod +x ./verify_signature.sh </code></pre></p> </li> <li> <p>Run the script with the downloaded package (or artifact) and tag version as inputs <pre><code>./verify_signature.sh ARTIFACT_PACKAGE TAG\n</code></pre></p> </li> </ul> <p>For example:  <pre><code>$ ./verify_signature.sh oidc-client-demo_0.14.0_Linux_x86_64.tar.gz v0.14.0 \n\nChecking Signature for version: v0.14.0\nVerified OK\n</code></pre></p>"},{"location":"server_config/","title":"Server Configuration","text":"<p>You will need to configure the remote Authorization Server with the settings matching your client configuration. </p>"},{"location":"server_config/#matching-configuration","title":"Matching Configuration","text":"<p>You MUST provide the same setting as for your local <code>config.yaml</code> (see Client Configuration): </p> <ul> <li><code>client_id</code></li> <li><code>client_secret</code></li> <li><code>auth_method</code> </li> <li><code>scopes</code> </li> </ul>"},{"location":"server_config/#redirect-uri","title":"Redirect URI","text":"<p>Default: <code>http://127.0.0.1:5556/auth/callback</code></p> <p>Warning</p> <p>You can change the port number of the local client using the <code>--port</code> or using a hostname instead of ip using <code>--localhost</code> flag. If you do so, you will need to update the redirect_uri on the Authorization Server configuration as well</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>This page regroups some of the most common errors.</p>"},{"location":"troubleshooting/#closing-local-server","title":"Closing Local Server","text":"<p>Use <code>CTL+C</code> to close the local http server </p> <pre><code>^C2022-01-21T18:56:07.357+0100 [INFO]  oidc-client: Got signal: sig=interrupt\n2022-01-21T18:56:07.358+0100 [INFO]  oidc-client: Server is shuting down: error=\"http: Server closed\"\n</code></pre>"},{"location":"troubleshooting/#configuration-validation-errors","title":"Configuration Validation Errors","text":""},{"location":"troubleshooting/#missing-mandatory-settings","title":"Missing Mandatory Settings","text":"<ul> <li>example missing client_id, client_secret: <pre><code>oidc-client client --config example/wrong.yaml                                                    \nKey: 'OIDCClientConfig.ClientID' Error:Field validation for 'ClientID' failed on the 'required' tag\nKey: 'OIDCClientConfig.ClientSecret' Error:Field validation for 'ClientSecret' failed on the 'required' tag\n2022-01-21T18:48:47.385+0100 [ERROR] oidc-client: Could not validate config\n</code></pre></li> </ul>"},{"location":"troubleshooting/#incorrect-auth-method","title":"Incorrect Auth Method","text":"<p>If <code>auth_method</code>  is not one of </p> <ul> <li><code>client_secret_basic</code></li> <li><code>client_secret_post</code></li> </ul> <pre><code>oidc-client client --config example/wrong.yaml\nKey: 'OIDCClientConfig.AuthMethod' Error:Field validation for 'AuthMethod' failed on the 'oneof' tag\n2022-01-21T18:50:34.283+0100 [ERROR] oidc-client: Could not validate config\n</code></pre>"},{"location":"troubleshooting/#error-well-known-endpoints","title":"Error Well Known Endpoints","text":"<ul> <li>invalid format <pre><code>oidc-client client --config example/wrong.yaml\n2022-01-21T18:52:25.037+0100 [ERROR] oidc-client: Could create OIDC provider form WellKnown endpoint:\n</code></pre></li> </ul>"},{"location":"troubleshooting/#error-getting-access-token","title":"Error Getting Access Token","text":"<ul> <li>invalid credentials</li> </ul> <pre><code>2022-01-21T18:54:51.511+0100 [INFO]  oidc-client: Go to http://127.0.0.1:5556/login\n2022-01-21T18:55:14.556+0100 [INFO]  oidc-client: Received AuthZ Code: code=Qe5J0drIVTxMLpwKLOF-Ee-t91M\n2022-01-21T18:55:14.578+0100 [ERROR] oidc-client: Failed to get Access Token:\n  err=\n  | oauth2: cannot fetch token: 400 Bad Request\n  | Response: {\"error_description\":\"Invalid authentication method for accessing this endpoint.\",\"error\":\"invalid_client\"}\n</code></pre>"},{"location":"troubleshooting/#tls-error","title":"TLS error","text":"<pre><code>oidc-client client --config example/wrong.yaml \n2022-01-21T18:57:45.955+0100 [ERROR] oidc-client: Could create OIDC provider form WellKnown endpoint: err=\"Get \\\"https://expired.badssl.com/oauth2/.well-known/openid-configuration\\\": x509: certificate has expired or is not yet valid: current time 2022-01-21T18:57:45+01:00 is after 2015-04-12T23:59:59Z\"\n2022-01-21T18:57:45.955+0100 [ERROR] oidc-client: Error creating client: error=\"Get \\\"https://expired.badssl.com/oauth2/.well-known/openid-configuration\\\": x509: certificate has expired or is not yet valid: current time 2022-01-21T18:57:45+01:00 is after 2015-04-12T23:59:59Z\"\n</code></pre>"},{"location":"contributing/contributing/","title":"Contributing","text":"<p>Look at CONTRIBUTING.md at the root of the Github repo.</p>"},{"location":"contributing/git/","title":"Git","text":""},{"location":"contributing/git/#commit-pattern","title":"Commit Pattern","text":"<p>Commit message template:  <pre><code>&lt;type&gt;: &lt;subject&gt;\n&lt;BLANK LINE&gt;\n&lt;body&gt;\n&lt;BLANK LINE&gt;\n&lt;footer&gt;\n</code></pre></p> <p>Use the following type for your commit messages: </p> <ul> <li><code>docs:</code> for commit related to documentation change</li> <li><code>feat:</code> for commit related to a new feature, also add a reference to the Github issue in the subject </li> <li><code>fix:</code>  for commit related to a bug fix, also add a reference to the Github issue in the subject</li> </ul> <p>Use the following type for commits that should not appear in changelog or release note uses: </p> <ul> <li><code>test:</code> for test </li> <li><code>typo:</code> for fixing typo </li> <li><code>ignore:</code> for everything else</li> </ul>"},{"location":"contributing/git/#breaking-change-or-note","title":"Breaking Change or Note","text":"<p>Mention <code>BREAKING CHANGE:</code> or <code>NOTE:</code>  in the footer.</p>"},{"location":"contributing/git/#use-rebase-before-submitting-pull-request","title":"Use rebase before submitting Pull Request","text":"<p>Make sure to rebase you commits (on your feature branch) first so that the git log follows the patterns mentioned above. </p> <pre><code>git rebase -i\n</code></pre>"},{"location":"contributing/tooling/","title":"Tooling","text":""},{"location":"contributing/tooling/#release-goreleaser","title":"Release: goreleaser","text":"<p>Goreleaser is used for building, packaging, and releasing new version of the software.</p> <p>Info</p> <p>See section \"Git\" for more details about git commit message</p>"},{"location":"contributing/tooling/#making-local-snapshot-build","title":"Making Local Snapshot Build","text":"<p><pre><code>make build-snapshot\n</code></pre> Or  <pre><code>goreleaser build --rm-dist --snapshot --single-target\n</code></pre></p>"},{"location":"contributing/tooling/#testing-pre-release","title":"Testing Pre-release","text":"<p><pre><code>make release-skip-publish\n</code></pre> Or</p> <pre><code>goreleaser release --rm-dist --skip-publish\n</code></pre>"},{"location":"contributing/tooling/#vulnerability-scanning","title":"Vulnerability Scanning","text":"<p>nancy is used for dependency scanning.</p> <pre><code>make scan\n</code></pre>"},{"location":"contributing/tooling/#linting","title":"Linting","text":"<p>golangci-lint is used for code linting. </p> <pre><code>make lint\n</code></pre>"},{"location":"contributing/tooling/#changelog-generator","title":"Changelog Generator","text":"<p>git-chglog is used for Changelog generation</p> <pre><code>make changelog\n</code></pre> <p>Info</p> <p>See section \"Git\" for more details about git commit message</p>"},{"location":"contributing/tooling/#documentation","title":"Documentation","text":"<p>MkDocs is used for generating the documentation.</p>"},{"location":"flows/authorization_code/","title":"Authorization Code Flow","text":""},{"location":"flows/authorization_code/#tldr","title":"tl;dr","text":"<ol> <li>Start the client with a config.yaml:  <pre><code>oidc-client client --config config.yaml\n</code></pre></li> <li>Copy the url (default: http://127.0.0.1:5556/login) in a web browser. This will redirect to the configured Authorization Server <pre><code>[INFO]  oidc-client: Go to http://127.0.0.1:5556/login\n</code></pre></li> <li>Authenticate to the Authorization Server</li> <li>You can view the output in the terminal window: <pre><code>[INFO]  oidc-client: Access Token Response:\n  Response=\n  | {\n  |     \"access_token\": \"\",\n  |     \"refresh_token\": \"\",\n  |     \"scope\": \"openid profile \",\n  |     \"id_token\": \"\",\n  |     \"token_type\": \"Bearer\",\n  |     \"nonce\": \"-\",\n  |     \"expires_in_human_readable\": \"\"\n  | }\n\n[INFO]  oidc-client: IDToken Claims:\n  IDTokenClaims=\n  | {\n  | }\n\n[INFO]  oidc-client: Userinfo Claims:\n  UserInfoClaims=\n  | {\n  | }\n\n[INFO]  oidc-client: Stopping server\n</code></pre></li> </ol>"},{"location":"flows/authorization_code/#how-it-works","title":"How it works?","text":"<p>The CLI will parse the config file (<code>--config</code>) and fetch the Issuer <code>.well-known/openid-configuration</code>. After some basic validation, it will start a local http server (port can be changed with <code>--port</code>) which hosts: </p> <ul> <li>a login page (default: <code>http://127.0.0.1:5556/login</code>) </li> <li>a callback page (the redirect_uri, default: <code>http://127.0.0.1:5556/auth/callback</code>).</li> </ul> <p>Navigating to the login page will </p> <ol> <li>Generate a randoim <code>nonce</code> and <code>state</code>, and set those values as cookies</li> <li>initiate the Authorization Code flow by redirecting to the Authorization Server's authorize_endpoint. After successful authentication on the Authorization Server, the Authorization Server will redirect back to the redirect_uri with the authorization_code (and other parameters). </li> </ol> <p>On the callback page (redirect_uri), the client will</p> <ol> <li>validate the <code>state</code> cookie matches the <code>state</code> parameter returned on the callback page</li> <li>attempt to exchange the authorization_code for an Access Token, and optionally a Refresh Token and ID Token</li> <li>if an ID Token is returned, the client will<ol> <li>validate the token signature against the <code>jwk_uri</code> of the Authorization Server</li> <li>validate that the <code>nonce</code> cookie matches the <code>nonce</code> field inside the ID Token</li> <li>if <code>amr_list</code> is configured, validate that at least one of the <code>amr</code> from the ID Token is present in the <code>amr_list</code></li> </ol> </li> <li>Use the Access Token to retreived user profile information from the <code>userinfo</code> endpoint of the Authorization Server</li> </ol>"},{"location":"flows/authorization_code/#cli-usage","title":"CLI Usage","text":"<p><pre><code>oidc-client help client\n</code></pre> <pre><code>Starts the oidc client\n\nUsage:\n  oidc-client client [flags]\n\nFlags:\n  -c, --config string   oidc client config file\n  -h, --help            help for client\n  -p, --port int        oidc client call back port (default 5556)\n\nGlobal Flags:\n  -d, --debug           debug mode enabled\n      --no-color        disable color output\n      --skip-userinfo   Skip fetching Userinfo\n</code></pre></p>"},{"location":"flows/end_session/","title":"End Session","text":"<p>Warning</p> <p>EndSession call is not support by the <code>oidc-client</code> tool. However this page describe how make the call using <code>curl</code> or httpie.</p> <ol> <li>Get the <code>end_session_endpoint</code> from the Authorization Server's <code>.well-known/openid-configuration</code> </li> <li>Use a previously obtained ID Token to make a call to the <code>end_session_endpoint</code></li> </ol> <pre><code>http GET [end_session_endpoint]?id_token_hint=[ID TOKEN]\n</code></pre> <p>Info</p> <p>More info OpenID Connect Session Management 1.0 - draft 10</p>"},{"location":"flows/introspect/","title":"Token Introspection","text":"<p>Warning</p> <p>For the <code>introspect</code> subcommand the <code>introspect_endpoint:</code> is mandatory.</p> <p>See configuration for more details.</p>"},{"location":"flows/introspect/#tldr","title":"tl;dr","text":"<ol> <li>Use a previously obtained Refresh Token or Access Token with the client configuration <code>config.yaml</code>: <pre><code>oidc-client introspect --config config.yaml --token [Token]\n</code></pre></li> <li>The client will Introspect the Token and display the response from the server <pre><code>[INFO]  oidc-client: Introspect Response:\n  Response=\n  | {\n  |     \"active\": true,\n  |     \"scope\": \"openid profile\",\n  |     \"client_id\": \"some_client_id\",\n  |     \"username\": \"alice\",\n  |     \"token_type\": \"Bearer\",\n  |     \"exp\": 1644084182,\n  |     \"sub\": \"alice\",\n  |     \"iss\": \"https://oauth.example.com/oauth2\",\n  |     \"expiry\": \"2022-02-05T19:03:02+01:00\",\n  |     \"issued_at\": \"0001-01-01T00:00:00Z\",\n  |     \"not_before\": \"0001-01-01T00:00:00Z\"\n  | }\n\n[INFO]  oidc-client: Introspect Raw:\n  raw=\n  | {\n  |     \"active\": true\n  | }\n</code></pre></li> </ol>"},{"location":"flows/introspect/#how-it-works","title":"How it works?","text":"<p>The CLI client sends the token introspection request to the Authorization Server, based on the config (<code>config.yaml</code>). </p> <p>It will parse the JSON response according to the rfc7662 and outputs them in <code>Introspect Response:</code>. </p> <p>Note</p> <p><code>expiry</code>, <code>issued_at</code> and <code>not_before</code> are not standard fields, but they are human readable forms of the corresponding standard fields <code>exp</code>, <code>iat</code>, <code>nbf</code> (respectively) that are expressed as Unix Timestamps.</p> <p>In some case the Authorization Server can choose to include additional fields in the token introspection response. For that the raw Introspection Response is displayed under <code>Introspect Raw:</code>. </p>"},{"location":"flows/introspect/#cli-usage","title":"CLI Usage","text":"<p><pre><code>oidc-client help introspect\n</code></pre> <pre><code>Introspect token\n\nUsage:\n  oidc-client introspect [flags]\n\nFlags:\n  -c, --config string   oidc client config file\n  -h, --help            help for introspect\n      --token string    Token to introspect\n\nGlobal Flags:\n  -d, --debug      debug mode enabled\n      --no-color   disable color output\n</code></pre></p>"},{"location":"flows/refresh_token/","title":"Refresh Token","text":""},{"location":"flows/refresh_token/#tldr","title":"tl;dr","text":"<ol> <li>Use a previously obtained Refresh Token with the client configuration <code>config.yaml</code>: <pre><code>oidc-client refresh-token --config config.yaml  --refresh-token [Refresh Token]\n</code></pre></li> <li>The client will automatically exchange the Refresh Token for a new Access Token Response, ID Token and fetch the Userinfo <pre><code>[INFO]  oidc-client: Access Token Response:\n  Response=\n  | {\n  |     \"access_token\": \"\",\n  |     \"refresh_token\": \"\",\n  |     \"scope\": \"openid profile \",\n  |     \"id_token\": \"\",\n  |     \"token_type\": \"Bearer\",\n  |     \"nonce\": \"-\",\n  |     \"expires_in_human_readable\": \"\"\n  | }\n\n[INFO]  oidc-client: IDToken Claims:\n  IDTokenClaims=\n  | {\n  | }\n\n[INFO]  oidc-client: Userinfo Claims:\n  UserInfoClaims=\n  | {\n  | }\n\n[INFO]  oidc-client: Stopping server\n</code></pre></li> </ol>"},{"location":"flows/refresh_token/#how-it-works","title":"How it works?","text":"<p>The CLI client will parse the config file (<code>--config</code>) and fetch the Issuer <code>.well-known/openid-configuration</code>. The client will then exchange the Refresh Token (--refresh-token`) for a new Token Response, including a new Access Token, Refresh Token, and ID Token. </p> <p>Unless <code>--skip-id-token-verification</code> is set, the client will </p> <ol> <li>validate the ID Token Signature against the Authorization Server <code>jwk_uri</code></li> <li>if <code>amr_list</code> is configured, validate that at least one of the <code>amr</code> from the ID Token is present in the <code>amr_list</code></li> </ol> <p>Unless <code>--skip-userinfo</code> is set, the client will use the Access Token obtain to fetch user profile information from the <code>userinfo</code> endpoint.</p>"},{"location":"flows/refresh_token/#cli-usage","title":"CLI Usage","text":"<p><pre><code>oidc-client help  refresh-token\n</code></pre> <pre><code>Renew tokens with Refresh Token\n\nUsage:\n  oidc-client refresh-token [flags]\n\nFlags:\n  -c, --config string                oidc client config file\n  -h, --help                         help for refresh-token\n      --refresh-token string         Refresh Token\n      --skip-id-token-verification   Skip validation of id_token after renewing tokens\n\nGlobal Flags:\n  -d, --debug           debug mode enabled\n      --no-color        disable color output\n      --skip-userinfo   Skip fetching Userinfo\n</code></pre></p>"}]}